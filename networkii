#!/usr/bin/env python3
import argparse
import json
import os
import sys

CONFIG_DIR = os.path.expanduser('~/.config/networkii')
CONFIG_FILE = os.path.join(CONFIG_DIR, 'config.json')
DEFAULT_CONFIG = {
    'ping_target': '1.1.1.1',
    'speed_test_interval': 30
}

def load_config():
    """Load configuration from file"""
    try:
        if not os.path.exists(CONFIG_DIR):
            os.makedirs(CONFIG_DIR, exist_ok=True)
        
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, 'r') as f:
                loaded_config = json.load(f)
                # Update config with loaded values while preserving defaults
                config = DEFAULT_CONFIG.copy()
                config.update(loaded_config)
                return config
        else:
            # Save default config if no file exists
            save_config(DEFAULT_CONFIG)
            return DEFAULT_CONFIG
    except Exception as e:
        print(f"Error loading configuration: {e}")
        return DEFAULT_CONFIG

def save_config(config):
    """Save configuration to file"""
    try:
        if not os.path.exists(CONFIG_DIR):
            os.makedirs(CONFIG_DIR, exist_ok=True)
        
        with open(CONFIG_FILE, 'w') as f:
            json.dump(config, f, indent=4)
    except Exception as e:
        print(f"Error saving configuration: {e}")
        sys.exit(1)

def show_config():
    """Display current configuration"""
    config = load_config()
    print("\nCurrent Configuration:")
    print("-" * 30)
    print(f"Ping Target: {config.get('ping_target', 'Not set')}")
    print(f"Speed Test Interval: {config.get('speed_test_interval', 'Not set')} minutes")
    print("-" * 30)

def update_config(args):
    """Update configuration with new values"""
    current_config = load_config()
    changes_made = False

    if args.ping_target is not None:
        current_config['ping_target'] = args.ping_target
        changes_made = True

    if args.speed_test_interval is not None:
        if 5 <= args.speed_test_interval <= 1440:
            current_config['speed_test_interval'] = args.speed_test_interval
            changes_made = True
        else:
            print("Error: Speed test interval must be between 5 and 1440 minutes")
            return

    if changes_made:
        save_config(current_config)
        print("Configuration updated successfully!")
        show_config()
    else:
        print("No changes specified. Use --help to see available options.")

def main():
    parser = argparse.ArgumentParser(description='Networkii Configuration Tool')
    subparsers = parser.add_subparsers(dest='command', help='Available commands')
    
    # Show command
    subparsers.add_parser('show', help='Show current configuration')
    
    # Set command
    set_parser = subparsers.add_parser('set', help='Set configuration values')
    set_parser.add_argument('--ping-target', help='Set the ping target (e.g., 1.1.1.1)')
    set_parser.add_argument('--speed-test-interval', type=int, help='Set speed test interval in minutes (5-1440)')

    args = parser.parse_args()

    if args.command == 'show':
        show_config()
    elif args.command == 'set':
        update_config(args)
    else:
        parser.print_help()

if __name__ == "__main__":
    main() 